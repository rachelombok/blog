<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vue on rachel&#39;s blog</title>
    <link>/tags/vue/</link>
    <description>Recent content in vue on rachel&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Dec 2020 21:41:00 +0700</lastBuildDate><atom:link href="/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a Web-App to Track My Expense on Google Sheets</title>
      <link>/code/web-app-to-track-expense-on-google-sheets/</link>
      <pubDate>Sun, 27 Dec 2020 21:41:00 +0700</pubDate>
      
      <guid>/code/web-app-to-track-expense-on-google-sheets/</guid>
      <description>I&amp;rsquo;ve tried so many applications to track my spending in the past. None of them stick with me for six months, at least. I always found myself fighting back against those applications. It could be the spending categories that didn&amp;rsquo;t fit my use case. Or some expense related fields that were missing, but I need those details. Or as simple as it didn&amp;rsquo;t have a web version, so I couldn&amp;rsquo;t log my spending while I was on my laptop.</description>
    </item>
    
    <item>
      <title>Vue.js: Implement Log In with Google Feature</title>
      <link>/code/vue-google-login/</link>
      <pubDate>Sun, 08 Nov 2020 20:28:00 +0700</pubDate>
      
      <guid>/code/vue-google-login/</guid>
      <description>This weekend, I was tinkering with the latest version of Vue.js (v3) and the official Google API client library for JavaScript. I tried to implement the &amp;ldquo;Log In with Google&amp;rdquo; feature on a Vue.js project. I scaffolded the project using the Vue CLI. Added Vue Router for routing and Vuex for state management.
First, we need to include the Google API client library on our HTML file. Note that we&amp;rsquo;re using the defer property so it won&amp;rsquo;t block the browser from parsing the rest of the HTML file.</description>
    </item>
    
    <item>
      <title>Incorporating Vue UI with a Traditional Laravel Login Flow</title>
      <link>/code/incorporating-vue-ui-with-a-traditional-laravel-login-flow/</link>
      <pubDate>Sun, 22 Mar 2020 21:21:00 +0700</pubDate>
      
      <guid>/code/incorporating-vue-ui-with-a-traditional-laravel-login-flow/</guid>
      <description>Let&amp;rsquo;s say we want to create a traditional login flow using the Laravel framework. The users will enter their username and password and our system will send an HTTP POST request to authenticate that credentials. And at the same time, instead of using a traditional HTML form, we want to use a Vue component for building the form UI.
In my case, I also use the VeeValidate library for validating on the frontend side.</description>
    </item>
    
    <item>
      <title>Setting Up Tailwind CSS with Vue CLI</title>
      <link>/code/setting-up-tailwind-with-vue-cli/</link>
      <pubDate>Sat, 07 Mar 2020 22:16:00 +0700</pubDate>
      
      <guid>/code/setting-up-tailwind-with-vue-cli/</guid>
      <description>It&amp;rsquo;s quite easy to set up Tailwind CSS within your Vue CLI project. Since Vue CLI is already shipped with PostCSS, all we have to do is to install Tailwind as a PostCSS plugin. If you look at this Vue CLI source code, you&amp;rsquo;ll notice that Vue CLI will look through every possible PostCSS config file.
const hasPostCSSConfig = !!(loaderOptions.postcss || api.service.pkg.postcss || findExisting(api.resolve(&amp;#39;.&amp;#39;), [ &amp;#39;.postcssrc&amp;#39;, &amp;#39;.postcssrc.js&amp;#39;, &amp;#39;postcss.config.js&amp;#39;, &amp;#39;.postcssrc.yaml&amp;#39;, &amp;#39;.postcssrc.json&amp;#39; ])) If the config file is not found, it will create a PostCSS config object where autoprefixer is loaded as a plugin.</description>
    </item>
    
    <item>
      <title>Vue Chart Component with Chart.js</title>
      <link>/code/vue-chart-component-with-chartjs/</link>
      <pubDate>Sun, 14 Oct 2018 18:38:00 +0200</pubDate>
      
      <guid>/code/vue-chart-component-with-chartjs/</guid>
      <description>Chart.js is an amazing chart library for JavaScript. It&amp;rsquo;s modern and performant; built on top of the HTML5 canvas. It includes 8 different chart types which super easy to extend and configure. On top of it all, the generated chart just looks beautiful.
Last night I did some tinkering to integrate Chart.js within the existing Vue code base. So, how can we do that? If you want, there&amp;rsquo;s actually a wrapper for Chart.</description>
    </item>
    
  </channel>
</rss>
